name: Publish release

on:
  workflow_dispatch:
    inputs:
      versions:
        required: true
        type: string
        description: 'Example: {"include": [{"params": {"spark-version": "3.0.3","scala-version": "2.12.10"}}]}'
        default: |
          {
            "include": [
              {"params": {"spark-version": "3.0.3","scala-version": "2.12.10"}},
              {"params": {"spark-version": "3.1.3","scala-version": "2.12.10"}},
              {"params": {"spark-version": "3.2.4","scala-version": "2.12.15"}},
              {"params": {"spark-version": "3.3.4","scala-version": "2.12.15"}},
              {"params": {"spark-version": "3.4.4","scala-version": "2.12.17"}},
              {"params": {"spark-version": "3.5.5","scala-version": "2.12.18"}},
              {"params": {"spark-version": "3.2.4","scala-version": "2.13.5"}},
              {"params": {"spark-version": "3.3.4","scala-version": "2.13.8"}},
              {"params": {"spark-version": "3.4.4","scala-version": "2.13.8"}},
              {"params": {"spark-version": "3.5.5","scala-version": "2.13.8"}}
            ]
          }

env:
  # PySpark 3 versions only work with Python 3.9
  PYTHON_VERSION: "3.9"

jobs:
  maven-release:
    name: Publish maven release
    runs-on: ubuntu-latest
    if: ${{ !github.event.repository.fork }}
    environment: release # secret GPG_PRIVATE_KEY is protected
    permissions:
      id-token: write # required for PiPy publish
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(github.event.inputs.versions) }}

    steps:
      - name: Checkout release tag
        uses: actions/checkout@v4

      - name: Get versions
        id: versions
        run: |
          # get latest and release version
          latest=$(grep --max-count=1 "<version>.*</version>" README.md | sed -E -e "s/\s*<[^>]+>//g" -e "s/-[0-9.]+//g")
          version=$(grep --max-count=1 "<version>.*</version>" pom.xml | sed -E -e "s/\s*<[^>]+>//g" -e "s/-SNAPSHOT//" -e "s/-[0-9.]+//g")

          # share versions
          echo "release_tag_version=v${version}" >> "$GITHUB_OUTPUT"
          is_snapshot=$(if grep -q "<version>.*-SNAPSHOT</version>" pom.xml; then echo "true"; else echo "false"; fi)
          echo "is_snapshot=$is_snapshot" >> "$GITHUB_OUTPUT"

      - name: Check tag setup
        run: |
          # Check tag setup
          if [[ "$GITHUB_REF" != "refs/tags/v"* ]]
          then
            echo "This workflow must be run on a tag, not $GITHUB_REF"
            exit 1
          fi

          if [ "${{ steps.versions.outputs.is_snapshot }}" == "true" ]
          then
            echo "This is a tagged SNAPSHOT version. This is not allowed for release!"
            exit 1
          fi

          if [ "${{ github.ref_name }}" != "${{ steps.versions.outputs.release_tag_version }}" ]
          then
            echo "The version in the pom.xml is ${{ steps.versions.outputs.release_tag_version }}"
            echo "This tag is ${{ github.ref_name }}, which is different!"
            exit 1
          fi

      - name: Set up JDK 8 and Maven Central Repository
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9  # v4.2.1
        with:
          java-version: '8'
          distribution: 'corretto'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - uses: actions/setup-python@v5 
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore Maven packages cache
        id: cache-maven
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-mvn-build-${{ matrix.params.spark-version }}-${{ matrix.params.scala-version }}-${{ hashFiles('pom.xml') }}
          restore-keys: ${{ runner.os }}-mvn-build-${{ matrix.params.spark-version }}-${{ matrix.params.scala-version }}-

      - name: Publish maven artifacts
        id: publish-maven
        run: |
          ./set-version.sh ${{ matrix.params.spark-version }} ${{ matrix.params.scala-version }}
          mvn clean deploy -Dsign
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE}}

      - name: Prepare PyPi package
        id: prepare-pypi-package
        if: ${{ matrix.params.scala-version }} == 2.12*
        run: |
          ./build-whl.sh

      - name: Publish package distributions to Test PyPI
        id: publish-test-pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ matrix.params.scala-version }} == 2.12*
        with:
          user: ${{ secrets.TEST_PYPI_USERNAME }}
          password: ${{ secrets.TEST_PYPI_PASSWORD }}
          repository-url: https://test.pypi.org/legacy/
          packages-dir: python/dist
          verbose: true

      - name: Publish package distributions to PyPI
        id: publish-pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        if: ${{ matrix.params.scala-version }} == 2.12*
        with:
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}
          packages-dir: python/dist
          verbose: true
